from pydantic import BaseModel
from datetime import datetime
from typing import Optional, List
from app.db.models.scheme import TaskStatus

class TaskBase(BaseModel):
    job_id: int
    data_id: int
    required_ram: int

class TaskCreate(TaskBase):
    pass

class TaskRead(TaskBase):
    task_id: int
    created_at: datetime
    updated_at: datetime

class TaskUpdate(TaskBase):
    task_id: int
    node_id: Optional[int]
    data_id: Optional[int]
    status: Optional[TaskStatus]
    started_at: Optional[datetime]
    completed_at: Optional[datetime]

class TaskDataWithNodeInfo(BaseModel):
    """Schema for data generated by a task with node information"""
    data_id: int
    file_name: str
    parent_task_id: int
    task_node_id: int
    node_ip_address: str
    node_port: int
    
    class Config:
        from_attributes = True

class TaskOutputDependentInfo(BaseModel):
    """Schema for output files and the tasks that depend on them with node information"""
    # Output file information
    data_id: int
    file_name: str
    parent_task_id: int
    
    # Dependent task information
    dependent_task_id: int
    dependent_task_status: TaskStatus
    
    # Node information for the dependent task
    node_id: Optional[int]
    node_ip_address: Optional[str]
    node_port: Optional[int]
    
    class Config:
        from_attributes = True
