# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import common_pb2 as common__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import worker_pb2 as worker__pb2

GRPC_GENERATED_VERSION = '1.72.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in worker_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class WorkerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetWorkerStatus = channel.unary_unary(
                '/worker_api.WorkerService/GetWorkerStatus',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=worker__pb2.WorkerStatus.FromString,
                _registered_method=True)
        self.AssignTask = channel.unary_unary(
                '/worker_api.WorkerService/AssignTask',
                request_serializer=worker__pb2.TaskAssignment.SerializeToString,
                response_deserializer=common__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.ReceiveData = channel.stream_unary(
                '/worker_api.WorkerService/ReceiveData',
                request_serializer=worker__pb2.DataUploadRequest.SerializeToString,
                response_deserializer=common__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.GetDataMetadata = channel.unary_unary(
                '/worker_api.WorkerService/GetDataMetadata',
                request_serializer=common__pb2.DataIdentifier.SerializeToString,
                response_deserializer=common__pb2.DataMetadata.FromString,
                _registered_method=True)
        self.StreamData = channel.unary_stream(
                '/worker_api.WorkerService/StreamData',
                request_serializer=common__pb2.DataIdentifier.SerializeToString,
                response_deserializer=common__pb2.DataChunk.FromString,
                _registered_method=True)
        self.DeleteCachedData = channel.unary_unary(
                '/worker_api.WorkerService/DeleteCachedData',
                request_serializer=common__pb2.DataIdentifier.SerializeToString,
                response_deserializer=common__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.NotifyData = channel.unary_unary(
                '/worker_api.WorkerService/NotifyData',
                request_serializer=worker__pb2.DataNotification.SerializeToString,
                response_deserializer=common__pb2.StatusResponse.FromString,
                _registered_method=True)


class WorkerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetWorkerStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveData(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCachedData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetWorkerStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkerStatus,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=worker__pb2.WorkerStatus.SerializeToString,
            ),
            'AssignTask': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignTask,
                    request_deserializer=worker__pb2.TaskAssignment.FromString,
                    response_serializer=common__pb2.StatusResponse.SerializeToString,
            ),
            'ReceiveData': grpc.stream_unary_rpc_method_handler(
                    servicer.ReceiveData,
                    request_deserializer=worker__pb2.DataUploadRequest.FromString,
                    response_serializer=common__pb2.StatusResponse.SerializeToString,
            ),
            'GetDataMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataMetadata,
                    request_deserializer=common__pb2.DataIdentifier.FromString,
                    response_serializer=common__pb2.DataMetadata.SerializeToString,
            ),
            'StreamData': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamData,
                    request_deserializer=common__pb2.DataIdentifier.FromString,
                    response_serializer=common__pb2.DataChunk.SerializeToString,
            ),
            'DeleteCachedData': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCachedData,
                    request_deserializer=common__pb2.DataIdentifier.FromString,
                    response_serializer=common__pb2.StatusResponse.SerializeToString,
            ),
            'NotifyData': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyData,
                    request_deserializer=worker__pb2.DataNotification.FromString,
                    response_serializer=common__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'worker_api.WorkerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('worker_api.WorkerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WorkerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetWorkerStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/worker_api.WorkerService/GetWorkerStatus',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            worker__pb2.WorkerStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AssignTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/worker_api.WorkerService/AssignTask',
            worker__pb2.TaskAssignment.SerializeToString,
            common__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReceiveData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/worker_api.WorkerService/ReceiveData',
            worker__pb2.DataUploadRequest.SerializeToString,
            common__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDataMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/worker_api.WorkerService/GetDataMetadata',
            common__pb2.DataIdentifier.SerializeToString,
            common__pb2.DataMetadata.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/worker_api.WorkerService/StreamData',
            common__pb2.DataIdentifier.SerializeToString,
            common__pb2.DataChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCachedData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/worker_api.WorkerService/DeleteCachedData',
            common__pb2.DataIdentifier.SerializeToString,
            common__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NotifyData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/worker_api.WorkerService/NotifyData',
            worker__pb2.DataNotification.SerializeToString,
            common__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
